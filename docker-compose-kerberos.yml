---
version: '2'
services:

  kdc-kadmin:
    hostname: kdc-kadmin
    container_name: kdc-kadmin
    image: gft-bigdata/kdc-kadmin
    environment:
      REALM: GFT.COM
    volumes:
      # TODO: MAKE MULTIPLATFORM
      # This is needed otherwise there won't be enough entropy to generate a new kerberos realm
      - /dev/urandom:/dev/random

  kerberos-client:
    container_name: kerberos-client
    hostname: kerberos-client
    image: gft-bigdata/kerberos-client
    depends_on:
      - kdc-kadmin
    environment:
      REALM: GFT.COM
    volumes:
      - kafka_data_kerberos:/etc/security/keytabs

  zookeeper:
    image: gft-bigdata/zookeeper-kerberos
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/zookeeper_jaas.conf -Djava.security.krb5.conf=/etc/kafka/secrets/krb5.conf -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider -Dsun.security.krb5.debug=true"
    depends_on:
      - kdc-kadmin
    volumes:
      - kafka_data_kerberos:/etc/kafka/secrets

  broker:
    image: gft-bigdata/kafka-broker-kerberos
    hostname: broker
    container_name: broker
    restart: on-failure:3
    depends_on:
      - zookeeper
      - kdc-kadmin
      - kerberos-client
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_HOSTNAME: broker
      KAFKA_LISTENERS: PLAINTEXT://:9092,SASL_PLAINTEXT://broker:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092,SASL_PLAINTEXT://broker:9093
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: PLAINTEXT
      KAFKA_SASL_ENABLED_MECHANISM: GSSAPI, SASL_PLAINTEXT
      KAFKA_SASL_KERBEROS_SERVICE_NAME: kafka
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf -Djava.security.krb5.conf=/etc/kafka/secrets/krb5.conf -Dsun.security.krb5.debug=true"
    volumes:
      - kafka_data_kerberos:/etc/kafka/secrets

  client:
    image: gft-bigdata/kafka-client-kerberos
    hostname: client
    container_name: client
    environment:
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/kafka_client_jaas.conf -Djava.security.krb5.conf=/etc/kafka/secrets/krb5.conf -Dsun.security.krb5.debug=true"
    depends_on:
      - kdc-kadmin
      - kerberos-client
      - zookeeper
      - broker
    volumes:
      - kafka_data_kerberos:/etc/kafka/secrets

volumes:
  kafka_data_kerberos:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIRECTORY}

